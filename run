#!/usr/bin/env bash
set -euo pipefail

log() {
    echo "> $*"
}

readonly TOOLS="
    cfssl
    cfssljson
    cosign
    podman
"

for TOOL in $TOOLS; do
    if ! command -v "$TOOL" &>/dev/null; then
        log "Missing tool: $TOOL"
        exit 1
    fi
done

log "Preparing certificate chain"
cat <<EOF >root-csr.json
{
  "CN": "Root Certificate Authority",
  "key": {
    "algo": "ecdsa",
    "size": 256
  },
  "names": [
    {
      "C": "--",
      "ST": "STATE",
      "L": "LOCALITY",
      "O": "ORGANISATION",
      "OU": "LOCAL"
    }
  ],
  "ca": {
    "expiry": "87600h"
  }
}
EOF

cat <<EOF >intermediate-csr.json
{
  "CN": "Intermediate Certificate Authority",
  "key": {
    "algo": "ecdsa",
    "size": 256
  },
  "names": [
    {
      "C": "--",
      "ST": "STATE",
      "L": "LOCALITY",
      "O": "ORGANISATION",
      "OU": "LOCAL"
    }
  ]
}
EOF

log "Issuing root CA"
cfssl gencert -initca root-csr.json | cfssljson -bare root

log "Generating intermediate CA"
cfssl genkey intermediate-csr.json | cfssljson -bare intermediate

cat <<EOF >ca-config.json
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "intermediate": {
        "usages": ["cert sign", "crl sign"],
        "expiry": "70080h",
        "ca_constraint": {
          "is_ca": true,
          "max_path_len": 1
        }
      }
    }
  }
}
EOF

log "Issuing intermediate CA cert using root CA"
cfssl sign \
    -ca root.pem \
    -ca-key root-key.pem \
    -config ca-config.json \
    -profile intermediate \
    intermediate.csr |
    cfssljson -bare intermediate

log "Building cosign certificate"
cat <<EOF >cosign-config.json
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "intermediate": {
        "usages": ["cert sign", "crl sign"],
        "expiry": "70080h",
        "ca_constraint": {
          "is_ca": true,
          "max_path_len": 1,
          "copy_extensions": true
        }
      },
      "cosign": {
        "usages": ["signing", "digital signing"],
        "expiry": "8760h",
        "copy_extensions": true
      }
    }
  }
}
EOF

OIDC_ISSUER=http://localhost
OIDC_ISSUER_BASE64=$(echo -n $OIDC_ISSUER | base64 -w0)
CERTIFICATE_IDENTITY=me@org

# For extensions, see:
# https://github.com/sigstore/fulcio/blob/main/docs/oid-info.md#extension-values
cat <<EOF >cosign-csr.json
{
  "CN": "Cosign Certificate",
  "key": {
    "algo": "ecdsa",
    "size": 256
  },
  "names": [
    {
      "C": "--",
      "ST": "STATE",
      "L": "LOCALITY",
      "O": "ORGANISATION",
      "OU": "LOCAL"
    }
  ],
  "hosts": [
    "$CERTIFICATE_IDENTITY"
  ],
  "extensions": [
    {
        "id": [1,3,6,1,4,1,57264,1,1],
        "value": "$OIDC_ISSUER_BASE64"
    }
  ]
}
EOF

log "Issuing certificates via the intermediate CA"
cfssl gencert \
    -ca intermediate.pem \
    -ca-key intermediate-key.pem \
    -config cosign-config.json \
    -profile cosign cosign-csr.json |
    cfssljson -bare cosign

log "Starting registry"
podman rm -f registry
podman run --rm -d -p 5000:5000 --name registry registry:2

log "Building and pushing demo image"
IMAGE=localhost:5000/test
echo "FROM scratch" >Containerfile
podman build -t $IMAGE .
podman push --tls-verify=false --digestfile image-digest $IMAGE

cat intermediate.pem root.pem >ca-bundle.pem

log "Signing image"
DIGEST=$(cat image-digest)
cosign import-key-pair \
    --yes \
    --key cosign-key.pem \
    --output-key-prefix import-cosign

cosign sign \
    --key import-cosign.key \
    --tlog-upload=false \
    --cert cosign.pem \
    --cert-chain ca-bundle.pem \
    "$IMAGE@$DIGEST"

log "Verifying signature"
cosign verify \
    --certificate-identity $CERTIFICATE_IDENTITY \
    --certificate-oidc-issuer $OIDC_ISSUER \
    --insecure-ignore-sct \
    --insecure-ignore-tlog \
    --cert-chain root.pem \
    "$IMAGE@$DIGEST"
